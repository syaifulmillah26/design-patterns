c
self.class.superclass.methods.include?(:initialize)
self.class.superclass.methods
self.class.superclass
self.class.parentclass
self.class.parent_class
self.class
self
self.superclass
self.super_class
self.parent_class
self.parent
self.class
self
c
@adaptee.specific_request.reverse
@adaptee.specific_request.reverse!
@adaptee.specific_request.reverse
@adaptee.specific_request.reverse!
@adaptee.specific_request.reverve!
@adaptee.specific_request
@adaptee
c
self.class.get
self.class
self.get
self
c
@resp.parsed_response['error']
@resp.parsed_response
@resp
c
opt[:query]
opt[:query].to_json
opt[:query]
c
params.map { |k, v| ["#{k}" => "#{v}"] }.join.to_s
params.map { |k, v| ["#{k}" => "#{v}"] }.join.to_hash
params.map { |k, v| ["#{k}" => "#{v}"] }.join
params.map { |k, v| ["#{k}" => "#{v}"] }
params.map { |k, v| ["#{k}" => "#{v}"] }.join('&')
params.map { |k, v| "#{k}" => "#{v}" }.join('&')
params.map { |k, v| "#{k}" => #{v}" }.join('&')
params
c
@resp = HTTParty.get(url, headers: opt[:headers], body: opt[:body], params: converted_params(opt[:params]))
url
c
params.nil?
params
c
helo = "#{url}?#{opt[:params]}"
url = "#{url}?#{opt[:params]}"
url
url = "#{url}?#{convert_params(opt[:params])}"
c
opt[:params].map { |k, v| "#{k}=#{v}"  }.join('&')
opt[:params].map { |k, v| "#{k}=#{v}"  }.join(',')
opt[:params].map { |k, v| "#{k}=#{v}"  }
opt[:params].map { |k, v| v  }
opt[:params]
OpenStruct.new(opt[:params])
opt[:params].to_hash
opt[:params]
c
url
c
Dir['lib/***/*.rb']
Dir['lib/**/*.rb']
file.include?('design_pattern.rb')
file
c
file
c
file
name
c
user_builder.address
user_builder
c
response = http.get(uri)
response = http.get(uri.path)
response = http.get(uri.path, headers)
response = http.get(uri.path, params.to_json, headers)
n
uri = URI(url)
   12:       http = Net::HTTP.new(uri.host, uri.port)
c
response.body
response = http.get(uri.path)
response = http.get(uri.path, params.to_json, headers)
uri.path
http = Net::HTTP.new(uri.host, uri.port)
uri = URI(url)
uri.port
uri.host
uri
response = http.get(url)
response = http.get(uri.path)
response = http.get(uri)
response = http.get(uri, params, headers)
headers
params.to_json
params
response = http.get(uri, params.to_json, headers)
response = http.get(uri.path, params.to_json, headers)
http = Net::HTTP.new(uri)
uri = URI(url)
url
c
opt
opt.try('phone')
opt.try(phone:)
opt.try(phone)
opt.code
opt.phone
opt.helloooo
opt.phones
opt.phone
opt.try(:phone)
opt
opt = OpenStruct.new(opt)
OpenStruct.new(opt)
opt[:hello]
opt['phone']
opt
exit
url
resp.message
resp.code
resp.message
resp.code
self.class
__method__
resp.code
resp
c
resp.code.class
resp.code
resp
exit
get('https://jsonplaceholder.typicode.com/users')
get('https://jsonplaceholder.typicode.com/todos/1')
post
c
ls
cd
HTTParty
HttParty
c
self
c
__method__
self.method
self.__method__
__method__
__class__
class
__class__
__method__
self.class
c
self
self.instance_of?('class')
self.instance_of
self.instance
